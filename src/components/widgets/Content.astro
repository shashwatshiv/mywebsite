---
import type { Content as Props } from '~/types';
import Headline from '../ui/Headline.astro';
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import ItemGrid from '../ui/ItemGrid.astro';
import { Icon } from 'astro-icon/components';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  callToAction,
  callToAction2,
  items = [],
  columns,
  image = await Astro.slots.render('image'),
  isReversed = false,
  isAfterContent = false,
  techStack = [],

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// Map tech names to VSCode icons
const techIconMap: Record<string, string> = {
  'React.js': 'vscode-icons:file-type-reactjs',
  'Next.js': 'vscode-icons:file-type-light-next',
  TypeScript: 'vscode-icons:file-type-typescript-official',
  JavaScript: 'vscode-icons:file-type-js-official',
  'Node.js': 'vscode-icons:file-type-node',
  Python: 'vscode-icons:file-type-python',
  PostgreSQL: 'vscode-icons:file-type-pgsql',
  MongoDB: 'vscode-icons:file-type-mongo',
  Prisma: 'vscode-icons:file-type-prisma',
  Docker: 'vscode-icons:file-type-docker2',
  AWS: 'vscode-icons:file-type-aws',
  Tailwind: 'vscode-icons:file-type-tailwind',
  CSS: 'vscode-icons:file-type-css',
  HTML: 'vscode-icons:file-type-html',
  Express: 'vscode-icons:file-type-node',
  Firebase: 'vscode-icons:file-type-firebase',
  Turborepo: 'vscode-icons:file-type-turbo',
  'Hono.js': 'vscode-icons:file-type-node',
  NextAuth: 'vscode-icons:file-type-node',
  Zod: 'vscode-icons:file-type-node',
  JWT: 'vscode-icons:file-type-node',
  Zustand: 'vscode-icons:file-type-node',
  'Cloudflare Workers': 'vscode-icons:file-type-node',
};
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl mx-auto ${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : ''} ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'max-w-xl sm:mx-auto lg:max-w-2xl',
      title: 'text-4xl md:text-5xl font-bold tracking-tighter mb-4 font-heading',
      subtitle: 'max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-slate-400',
    }}
  />
  <div class="mx-auto max-w-7xl p-4 md:px-8">
    <div class={`md:flex ${isReversed ? 'md:flex-row-reverse' : ''} md:gap-16`}>
      <div class="md:basis-1/2 self-center">
        {content && <div class="mb-12 text-lg dark:text-slate-400" set:html={content} />}

        <ItemGrid
          items={items}
          columns={columns}
          defaultIcon="tabler:check"
          classes={{
            container: `gap-y-4 md:gap-y-8`,
            panel: 'max-w-none',
            title: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
            description: 'text-muted dark:text-slate-400 ml-2 rtl:ml-0 rtl:mr-2',
            icon: 'flex h-7 w-7 items-center justify-center rounded-full bg-green-600 dark:bg-green-700 text-gray-50 p-1',
            action: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
          }}
        />

        {/* Tech Stack Display */}
        {
          techStack && techStack.length > 0 && (
            <div class="mt-6">
              <h4 class="text-lg font-medium leading-6 dark:text-white mb-3">Tech Stack:</h4>
              <div class="flex flex-wrap gap-2">
                {techStack.map((tech) => (
                  <div class="inline-flex items-center px-2.5 py-1.5 rounded-md text-xs font-medium bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 border border-gray-200 dark:border-gray-700">
                    {techIconMap[tech] && <Icon name={techIconMap[tech]} class="w-4 h-4 mr-1" />}
                    {tech}
                  </div>
                ))}
              </div>
            </div>
          )
        }
      </div>
      <div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/2">
        {
          image && (
            <div class="relative m-auto max-w-4xl">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto w-full rounded-lg bg-gray-500 shadow-lg"
                  width={500}
                  widths={[400, 768]}
                  sizes="(max-width: 768px) 100vw, 432px"
                  layout="responsive"
                  {...image}
                />
              )}
            </div>
          )
        }

        <div class="py-8 justify-center flex gap-4">
          {callToAction && <Button {...callToAction} />}
          {callToAction2 && <Button {...callToAction2} />}
        </div>
      </div>
    </div>
  </div>
</WidgetWrapper>
